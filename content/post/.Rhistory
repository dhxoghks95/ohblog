blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE)
# install.packages("sparklyr")
# install.packages("tidyverse")
library(sparklyr)
library(tidyverse)
sc <-spark_connect(master="local")
spark_version(sc=sc)
# 버전이 잘 나오면 잘 연결된것입니다.
# 스파크 연결해제
# spark_disconnect(sc=sc)
?spark_read_csv
flight_tbls = spark_read_csv(sc, "flights", path = "C:/Users/dhxog/Downloads/810_1496_bundle_archive/flights.csv")
scr_tbls(sc)
src_tbls(sc)
flights_tbls = tbl(sc, "flights")
dim(flights_tbls)
flights_tbl = tbl(sc, "flights")
# Spark Cluster에서 "flights"라는 이름의 dataframe을 tibble로 가져옵니다
dim(flights_tbl)
pryr::object_size(iris_tbl)
install.packages("pryr")
#install.packages("pryr")
pryr::object_size(iris_tbl)
#install.packages("pryr")
pryr::object_size(flights_tbl)
print(flights_tbl, n = 10, width = inf)
print(flights_tbl, n = 10, width = inf)
glimpse(flights_tbl)
flights_tbl %>% dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER)
flights_tbl %>% dplyr::filter(AIRLINE == 'AA')
flights_tbl %>% dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER) %>% dplyr::filter(AIRLINE == 'AA')
flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER) %>%
dplyr::filter(AIRLINE == 'AA') %>%
dplyr::arrange(desc(FLIGHT_NUMBER))
flights_tbl %>% dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL)
flights_tbl %>% dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL) %>% dplyr::filter(AIRLINE == 'AA')
flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL) %>%
dplyr::filter(AIRLINE == 'AA') %>%
dplyr::arrange(desc(FLIGHT_NUMBER), SCHEDULED_ARRIVAL)
flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL) %>%
dplyr::filter(AIRLINE == 'AA') %>%
dplyr::arrange(desc(FLIGHT_NUMBER), SCHEDULED_ARRIVAL) %>%
dplyr::mutate(AIR_NUMBER = paste0(AIRLINE, '_', FLIGHT_NUMBER))
flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL) %>%
dplyr::filter(AIRLINE == 'AA') %>%
dplyr::arrange(desc(FLIGHT_NUMBER), SCHEDULED_ARRIVAL) %>%
dplyr::mutate(AIR_NUMBER = paste0(AIRLINE, '_', FLIGHT_NUMBER)) %>%
dplyr::group_by(AIRLINE) %>%
dplyr::summarise(MEAN_ARRIVAL = mean(SCHEDULED_ARRIVAL))
flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL) %>%
dplyr::filter(AIRLINE == 'AA') %>%
dplyr::arrange(desc(FLIGHT_NUMBER), SCHEDULED_ARRIVAL) %>%
dplyr::mutate(AIR_NUMBER = paste0(AIRLINE, '_', FLIGHT_NUMBER)) %>%
dplyr::summarise(MEAN_ARRIVAL = mean(SCHEDULED_ARRIVAL))
flights_tbl %>% dplyr::select(YEAR, MONTH, DAY, AIRLINE, starts_with("FLIGHT"))
flights_tbl %>% dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, starts_with("AIR"))
flights_tbl %>% dplyr::select(YEAR, MONTH, DAY, FLIGHT_NUMBER, starts_with("AIR"))
flights_tbl %>% distinct(AIRLINE)
flights_tbl %>% dplyr::count(AIRLINE, sort = TRUE) %>%
dplyr::top_n(3)
flights_tbl %>% dplyr::count(AIRLINE, sort = TRUE) %>%
dplyr::top_n(3) %>%
explain()
flights_tbl %>% dplyr::count(AIRLINE, sort = TRUE) %>%
dplyr::top_n_rank(3) %>%
explain()
flights_tbl %>% dplyr::count(AIRLINE, sort = TRUE) %>%
dplyr::top_n(3) %>%
explain()
flights_tbl %>% dplyr::count(AIRLINE, sort = TRUE)
flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL) %>%
dplyr::arrange(desc(FLIGHT_NUMBER), SCHEDULED_ARRIVAL) %>%
dplyr::mutate(AIR_NUMBER = paste0(AIRLINE, '_', FLIGHT_NUMBER)) %>%
dplyr::group_by(AIRLINE) %>%
dplyr::summarise(MEAN_ARRIVAL = mean(SCHEDULED_ARRIVAL))
flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL) %>%
dplyr::arrange(desc(FLIGHT_NUMBER), SCHEDULED_ARRIVAL) %>%
dplyr::mutate(AIR_NUMBER = paste0(AIRLINE, '_', FLIGHT_NUMBER)) %>%
dplyr::group_by(AIRLINE) %>%
dplyr::summarise(MEAN_ARRIVAL = mean(SCHEDULED_ARRIVAL)) %>%
explain()
install.packages("DBI")
install.packages("DBI")
#install.packages("DBI")
DBI::dbGetQuery(sc, "SELECT `AIRLINE`, AVG(`SCHEDULED_ARRIVAL`) AS `MEAN_ARRIVAL`
FROM (SELECT `YEAR`, `MONTH`, `DAY`, `AIRLINE`, `FLIGHT_NUMBER`, `SCHEDULED_ARRIVAL`, CONCAT(`AIRLINE`, "_", `FLIGHT_NUMBER`) AS `AIR_NUMBER`
flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, AIRLINE, FLIGHT_NUMBER, SCHEDULED_ARRIVAL) %>%
dplyr::arrange(desc(FLIGHT_NUMBER), SCHEDULED_ARRIVAL) %>%
dplyr::group_by(AIRLINE) %>%
dplyr::summarise(MEAN_ARRIVAL = mean(SCHEDULED_ARRIVAL)) %>%
explain()
#install.packages("DBI")
DBI::dbGetQuery(sc,
"SELECT `AIRLINE`, AVG(`SCHEDULED_ARRIVAL`) AS `MEAN_ARRIVAL`
FROM (SELECT *
FROM (SELECT `YEAR`, `MONTH`, `DAY`, `AIRLINE`, `FLIGHT_NUMBER`, `SCHEDULED_ARRIVAL`
FROM `flights`) `dbplyr_053`
ORDER BY `FLIGHT_NUMBER` DESC, `SCHEDULED_ARRIVAL`) `dbplyr_054`
GROUP BY `AIRLINE`")
flights_df = flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, starts_with("AIR")) %>%
collect()
class(flights_df)
flights_air = flights_tbl %>%
dplyr::select(YEAR, MONTH, DAY, starts_with("AIR")) %>%
compute("flight_air")
src_tbls(sc)
blogdown:::serve_site()
#install.packages("pryr")
pryr::object_size(flights_tbl)
blogdown:::serve_site()
knitr::opts_chunk$set(echo = TRUE)
# install.packages("sparklyr")
# install.packages("tidyverse")
library(sparklyr)
library(tidyverse)
sc <-spark_connect(master="local")
# 자 이제 이 sc(spark cluster)를 통해 스파크에 접속할 것입니다.
spark_version(sc=sc)
# 버전이 잘 나오면 잘 연결된것입니다.
# 스파크 연결해제
# spark_disconnect(sc=sc)
flight_tbls = spark_read_csv(sc, name = "flights", path = "C:/Users/dhxog/Downloads/810_1496_bundle_archive/flights.csv")
# sc로 연결할 spark cluster를 넣고, table의 이름을 지어서 name으로 넣습니다. 그리고 path에 경로를 넣으면 됩니다.
# 내장 데이터프레임의 경우
# iris_tbls = copy_to(sc, iris)
src_tbls(sc)
blogdown:::serve_site()
#install.packages("pryr")
pryr::object_size(flights_tbl)
print(flights_tbl, n = 10, width = inf)
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
blogdown:::serve_site()
